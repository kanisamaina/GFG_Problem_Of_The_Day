Complexity:

  Time-O(n)-->complexity of next_permutation method
  Space-O(1)
  
Explanation:

  next_permutation method produces the next lexicographically greater permutation of the given input if possible.
  If lexicographcally greater input is not possible the function returns false else it returns true.
  So we use that function in the first half of the palindrome string(excluding the middle character in case of odd string),
  and we add that next lexicographically greater string to the final answer.Then,in case of odd string we add the middle
  character and for the second half of the palindrome we reverse the first half of the answer we got through next_permutation
  method and that to the final answer.In case next_permutation returns false,next greater permutation is not possible and we return -1.
  
Example:

  1)Even string
    12344321
    first half=1234
    next_permutation(first half) gives 1243
    now we reverse the first half to get second half,second half=3421
    now final ans=first half+second half
    final ans=12433421
  
  2)Odd string
    7845487
    first half=784
    next_permutation(first half) gives 847
    since it is odd string we add the middle element(5) along with first half(847) to the ans(8475)
    now we reverse the first half to get second half,second half=748
    now final ans=first half+middle element+second half
    final ans=8475748
    
  3)Next greater palindrome not possible
    543345
    next_permutation(543345) returns false,so we return -1.
    
Code(C++):

1)Using inbulit next_permutation():

class Solution{
    public:
    string nextPalin(string num) { 
    
        //complete the function here
    
        if(num.size()<=3)
            return "-1";
        
        int mid=num.size()/2-1;    
        string first=num.substr(0,mid+1);
        string ans="";
        
        if(!next_permutation(first.begin(),first.end()))
            return "-1";
        ans+=first;    
        if(num.size()%2)
            ans+=num[num.size()/2];
        
        reverse(first.begin(),first.end());
        ans+=first;
        
        return ans;

    }

};

2)Using own implementation of next_permutation(): 

class Solution{
    public:
    void nextPermutation(string& nums) {
        int i = nums.length() - 2;
        while (i >= 0 && nums[i + 1] <= nums[i]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length() - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums[i],nums[j]);
        }
        reverse(nums.begin()+i+1,nums.end());
    }

    
    string nextPalin(string num) { 
    
        //complete the function here
        
        if(num.size()<=3)
            return "-1";
        
        int mid=num.size()/2-1;    
        string first=num.substr(0,mid+1);
        string ans="",k=first;
        nextPermutation(first);
        
        if(first<=k)
            return "-1";
        ans+=first;    
        if(num.size()%2)
            ans+=num[num.size()/2];
        
        reverse(first.begin(),first.end());
        ans+=first;
        
        return ans;

    }

};
