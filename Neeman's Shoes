

Code(C++):

class Solution {
    public:
    string exercise(int N, int M, vector<vector<int>> A, int src, int dest, int X){
        // code here
        
        vector<vector<int>> path(N,vector<int>(N,0));
        
        for(int i=0;i<A.size();i++)
        {
            path[A[i][0]][A[i][1]]=A[i][2];
            path[A[i][1]][A[i][0]]=A[i][2];
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        
        vector<int> distance(N,INT_MAX);
        distance[src]=0;
        vector<bool> visited(N, false);
        pq.push(make_pair(0,src));
        
        while(!pq.empty())
        {
            int u = pq.top().second;
            pq.pop();
            
            visited[u] = true;
            
            for(int v = 0; v < N; v++)
            {
                if(path[u][v] != 0 and visited[v] == false)
                {
                    if(distance[v] > distance[u] + path[u][v])
                    {
                        distance[v] = distance[u] + path[u][v];
                        
                        pq.push(make_pair(distance[v],v));
                    }
                }
            }
        }
        
        return distance[dest]>X?"Neeman's Wool Joggers":"Neeman's Cotton Classics";
    
    }
};
