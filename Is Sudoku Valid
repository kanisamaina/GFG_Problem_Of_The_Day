Complexity:

  Time-O(1)-->since everytime we are traversing over the same 9*9 board-->O(9*9)=O(81)=O(1).
  Space-O(1)-->since the size of set will be fixed(81 at most) always similar to time.

Explanation:
  We create a set of strings instead of three maps(to store row,column and box entries) to reduce space,
  and add the entries as string with a suffix(in row/in column/in box) and their corresponding values(row/column/box number).
  Box number is calculated by k=i/3*3+j/3.Then whenever same entry occurs in any row or column or box we return false,else we return true.
  
Example for box number calculation:

0 0 0|1 1 1|2 2 2      i=2,j=1 ==> k=2/3*3+1/3=0*3+0 ,k=0
0 0 0|1 1 1|2 2 2      i=5,j=6 ==> k=5/3*3+6/3=1*3+2 ,k=5
0 0 0|1 1 1|2 2 2      i=8,j=5 ==> k=8/3*3+5/3=2*3+1 ,k=7
3 3 3|4 4 4|5 5 5
3 3 3|4 4 4|5 5 5
3 3 3|4 4 4|5 5 5
6 6 6|7 7 7|8 8 8
6 6 6|7 7 7|8 8 8
6 6 6|7 7 7|8 8 8


Code(C++):

class Solution{
public:
    int isValid(vector<vector<int>> mat){
        // code here
        unordered_set<string> s;
        
        for(int i=0;i<mat.size();i++)
        {
            for(int j=0;j<mat[0].size();j++)
            {
                if(mat[i][j]!=0)
                {
                    int k=i/3*3+j/3;
                    
                    if(s.find(to_string(mat[i][j])+" in row "+to_string(i))!=s.end() ||
                    s.find(to_string(mat[i][j])+" in col "+to_string(j))!=s.end() ||
                    s.find(to_string(mat[i][j])+" in box "+to_string(k))!=s.end())
                        return false;
                    
                    s.insert(to_string(mat[i][j])+" in row "+to_string(i));
                    s.insert(to_string(mat[i][j])+" in col "+to_string(j));
                    s.insert(to_string(mat[i][j])+" in box "+to_string(k));
                }
            }
        }
        
        return true;
    }
};
