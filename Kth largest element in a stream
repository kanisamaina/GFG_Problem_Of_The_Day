
Complexity:

    Time-O(nlogk)
    Space-O(k)


Code(C++):

class Solution {
  public:
    vector<int> kthLargest(int k, int arr[], int n) {
        // code here
        
        priority_queue<int,vector<int>,greater<int>> pq;
        vector<int> ans;
        
        for(int i=0;i<n;i++){
           
            if(pq.size()<k)
                pq.push(arr[i]);
            else if(pq.size()==k)
            {
                if(pq.top()<arr[i])
                {
                    pq.pop();
                    pq.push(arr[i]);
                }
            }
           
            if(pq.size()<k)
            {
                ans.push_back(-1);
            }
            else{
                ans.push_back(pq.top());
            }
        }
        
        return ans;
    }
};
